{"version":3,"sources":["helpers.js","components/ControlPresupuesto.js","components/Error.js","components/Formulario.js","components/Gasto.js","components/Listado.js","components/Pregunta.js","App.js","serviceWorker.js","index.js"],"names":["revisarPresupuesto","presupuesto","restante","ControlPresupuesto","className","Error","mensaje","Formulario","guardarGasto","guardarCrearGasto","useState","nombre","guardarNombre","cantidad","guardarCantidad","error","guardarError","onSubmit","e","preventDefault","isNaN","trim","gasto","id","shortid","generate","console","log","type","placeholder","value","onChange","target","parseInt","Gasto","Listado","gastos","map","key","Pregunta","guardarPresupuesto","guardarRestante","actualizarPregunta","App","mostrarpregunta","guardarGastos","creargasto","useEffect","presupuestoRestante","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.38d4c135.chunk.js","sourcesContent":["\r\nexport const revisarPresupuesto = (presupuesto, restante) => {\r\n    let clase;\r\n\r\n    if ((presupuesto / 4) > restante) {\r\n        clase = 'alert alert-danger'; \r\n    } else if (( presupuesto / 2 ) > restante) {\r\n        clase = 'alert alert-warning';\r\n    } else {\r\n        clase = 'alert alert-succes';\r\n    }\r\n \r\n    return clase;\r\n}\r\n","import React, { Fragment } from 'react'\r\nimport { revisarPresupuesto } from '../helpers'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const ControlPresupuesto = ({presupuesto, restante}) => {\r\n    return (\r\n        <Fragment>\r\n            <div className=\"alert alert-primary\">\r\n                Presupuesto: $ {presupuesto}\r\n            </div>\r\n\r\n            <div className={revisarPresupuesto(presupuesto, restante)}>\r\n                Restante: $ {restante}\r\n            </div>\r\n        </Fragment>\r\n\r\n    )\r\n}\r\n\r\nControlPresupuesto.propTypes = {\r\n    presupuesto: PropTypes.number.isRequired,\r\n    restante: PropTypes.number.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Error = ({ mensaje }) => (\r\n    <p className=\"alert alert-danger error\">{mensaje}</p>\r\n);\r\n\r\nError.propTypes = {\r\n    mensaje: PropTypes.string.isRequired\r\n}\r\n\r\nexport default Error;\r\n","import React, { Fragment, useState } from 'react'\r\nimport Error from './Error';\r\nimport shortid from 'shortid';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Formulario = ({guardarGasto, guardarCrearGasto}) => {\r\n\r\n    const [nombre, guardarNombre] = useState('');\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, guardarError] = useState(false);\r\n\r\n\r\n// Cuando el usuario agrega un gasto\r\nconst agregarGasto = e => {\r\n    e.preventDefault();\r\n\r\n    // Validar\r\n    if(cantidad < 1 || isNaN(cantidad) || nombre.trim() === '' ){\r\n        guardarError(true);\r\n        return;\r\n    }\r\n    guardarError(false);\r\n    // Contruir gasto\r\n    const gasto = {\r\n        nombre,\r\n        cantidad,\r\n        id: shortid.generate()\r\n    }\r\n    console.log(gasto);\r\n\r\n    // Pasar el gasto al componente principal\r\n    guardarGasto(gasto);\r\n    guardarCrearGasto(true);\r\n\r\n    // Resetear el form\r\n    guardarNombre('');\r\n    guardarCantidad(0);\r\n}\r\n\r\n    return (\r\n        <Fragment>\r\n            <form\r\n                onSubmit={agregarGasto}\r\n            >\r\n                <h2>Agrega tus gastos aquí</h2>\r\n\r\n                { error ? <Error mensaje=\"Ambos campos son obligatorios o el presupuesto es invalido\" /> : null}\r\n\r\n                <div className=\"campo\">\r\n                    <label>Nombre Gasto</label>\r\n                    <input\r\n                        type=\"text\"\r\n                        className=\"u-full-width\"\r\n                        placeholder=\"Ej. Transporte\"\r\n                        value={nombre}\r\n                        onChange={e => guardarNombre(e.target.value)}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Cantidad Gasto</label>\r\n                    <input\r\n                        type=\"number\"\r\n                        className=\"u-full-width\"\r\n                        placeholder=\"Ej. 300\"\r\n                        value={cantidad}\r\n                        onChange={e => guardarCantidad(parseInt(e.target.value, 10))}\r\n                    />\r\n                </div>\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Agregar Gasto\"\r\n                />\r\n\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nFormulario.propTypes = {\r\n    guardarGasto: PropTypes.func.isRequired,\r\n    guardarCrearGasto: PropTypes.func.isRequired\r\n}","import React from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Gasto = ({gasto}) => {\r\n    return (\r\n        <div>\r\n            <li className=\"gastos\">\r\n                <p>\r\n                    {gasto.nombre}\r\n\r\n                    <span className=\"gasto\">$ {gasto.cantidad} </span>\r\n                </p>\r\n            </li>\r\n        </div>\r\n    )\r\n}\r\n\r\nGasto.propTypes = {\r\n    gasto: PropTypes.object.isRequired\r\n}","import React from 'react'\r\nimport { Gasto } from './Gasto';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Listado = ({gastos}) => {\r\n    return (\r\n        <div className=\"gastos-realizados\">\r\n            <h2>Listado</h2>\r\n            {gastos.map(gasto => (\r\n                <Gasto \r\n                    key={gasto.id}\r\n                    gasto={gasto}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n}\r\n\r\nListado.propTypes = {\r\n    gastos: PropTypes.array.isRequired\r\n}","import React, { Fragment, useState } from 'react'\r\nimport Error from './Error';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const Pregunta = ({guardarPresupuesto, guardarRestante, actualizarPregunta}) => {\r\n\r\n    // Definir el state\r\n    const [cantidad, guardarCantidad] = useState(0);\r\n    const [error, guardarError] = useState(false);\r\n\r\n    // Función que lee el presupuesto\r\n    const definirPresupuesto = e => {\r\n        guardarCantidad(parseInt(e.target.value, 10));\r\n    }\r\n\r\n    // Submit para definir el presupuesto\r\n    const agregarPresupuesto = e => {\r\n        e.preventDefault();\r\n\r\n        // Validar\r\n        if (cantidad < 1 || isNaN(cantidad)) {\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        \r\n        // Si se pasa la validación\r\n        guardarError(false);\r\n        guardarPresupuesto(cantidad);\r\n        guardarRestante(cantidad);\r\n        actualizarPregunta(false);\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Coloca tu presupuesto</h2>\r\n\r\n            {error ? <Error mensaje=\"El Presupuesto es incorrecto\" /> : null}\r\n\r\n            <form\r\n                onSubmit={agregarPresupuesto}\r\n            >\r\n                <input\r\n                    type=\"number\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Coloca tu presupuesto\"\r\n                    onChange={definirPresupuesto}\r\n                />\r\n\r\n                <input\r\n                    type=\"submit\"\r\n                    className=\"button-primary u-full-width\"\r\n                    value=\"Definir Presupuesto\"\r\n                />\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nPregunta.propTypes = {\r\n    guardarPresupuesto: PropTypes.func.isRequired,\r\n    guardarRestante: PropTypes.func.isRequired,\r\n    actualizarPregunta: PropTypes.func.isRequired\r\n}","import React, { useState, useEffect } from 'react';\nimport { ControlPresupuesto } from './components/ControlPresupuesto';\nimport { Formulario } from './components/Formulario';\nimport { Listado } from './components/Listado';\nimport { Pregunta } from './components/Pregunta';\n\n\nfunction App() {\n\n  // definir el state\n  const [presupuesto, guardarPresupuesto] = useState(0);\n  const [restante, guardarRestante] = useState(0);\n  const [mostrarpregunta, actualizarPregunta] = useState(true);\n  const [gastos, guardarGastos] = useState([]);\n  const [gasto, guardarGasto] = useState({});\n  const [creargasto, guardarCrearGasto] = useState(false);\n  // useEffect que actualiza el restante\n\n  useEffect(() => {\n    if (creargasto) {\n\n      // Agrega el nuevo presupuesto\n      guardarGastos([\n        ...gastos,\n        gasto\n      ]);\n\n      // Resta del presupuesto actual\n      const presupuestoRestante = restante - gasto.cantidad;\n      guardarRestante(presupuestoRestante);\n\n      // Resetear a false\n      guardarCrearGasto(false);\n    }\n  }, [gasto, creargasto, gastos, restante]);\n\n\n\n  return (\n    <div className=\"container\">\n      <header>\n        <h1>Gasto Semanal</h1>\n\n        <div className=\"contenido-principal contenido\">\n          {mostrarpregunta ?\n\n            <Pregunta\n              guardarPresupuesto={guardarPresupuesto}\n              guardarRestante={guardarRestante}\n              actualizarPregunta={actualizarPregunta}\n            />\n            :\n\n            <div className=\"row\">\n              <div className=\"one-half column\">\n                <Formulario\n                  guardarGasto={guardarGasto}\n                  guardarCrearGasto={guardarCrearGasto}\n                />\n              </div>\n              <div className=\"one-half column\">\n                <Listado\n                  gastos={gastos}\n                />\n                <ControlPresupuesto\n                  presupuesto={presupuesto}\n                  restante={restante}\n                />\n              </div>\n            </div>\n          }\n        </div>\n      </header>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />,\n  \n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}